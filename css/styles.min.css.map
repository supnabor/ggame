{"version":3,"sources":["_fonts.scss","_reset.scss","_common.scss","../node_modules/include-media/dist/_include-media.scss","blocks/block-header.scss","blocks/block-hero.scss","blocks/block-footer.scss"],"names":[],"mappings":"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","file":"styles.min.css","sourcesContent":["@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap');","html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n","body {\n  margin: 0;\nfont-family: \"Montserrat\", sans-serif;\n  color: #000;\n  background: radial-gradient(circle, rgba(255,218,234,1) 0%, rgba(196,223,255,1) 100%);\n  position: relative;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n}\n\np {\n  margin: 0;\n}\n\n.container {\n  width: 100%;\n  max-width: 1130px;\n  padding: 0 15px;\n  margin: 0 auto;\n}\n\n.section__title {\npadding: 4px 6px;\nbackground-color: #fff;\nborder: 1px #000 solid;\nborder-radius: 5px;\n  font-size: 40px;\n  font-weight: 700;\n  text-transform: uppercase;\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  position: relative;\n\n  @include media(\"<=1080px\") {\n    \n  }\n  @include media(\"<=810px\") {\n   \n   \n  }\n  @include media(\"<=430px\") {\n    font-size: 24px;\n  } \n  @include media(\"<=350px\") {\n   \n  }\n  &-black {\n    color: #000;\n  }\n}\n\n.section__subtitle {\n  padding-top: 30px;\n}\n\n.consent {\nborder-radius: 30px;\n  background: #F4F4F4;\n    padding: 30px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    gap: 15px;\n    max-width: 630px;\n    width: 95%;\n    position: fixed;\n    left: 10%;\n    bottom: 50px;\n    transform: translateX(-10%);\n    z-index: 21;\n    @include media(\"<=810px\") {\n      left: 50%;\n      transform: translateX(-50%);\n    }\n    img {\n      max-width: 40px;\n    }\n}\n\n.consent__text {\n  font-size: 14px;\n  color: #131313;\n  span {\n    display: block;\n    font-size: 30px;\n    text-transform: uppercase;\n  }\n}\n\n.consent__buttons {\n  display: flex;\n \n  gap: 30px;\n  align-items: center;\n  width: 100%;\n  @include media(\"<=810px\") {\n    justify-content: center;\n  }\n    @include media(\"<=600px\") {\n       flex-direction: column;\n    }\n}\n\n.close {\n  color: #0D83F0;\n  font-size: 14px;\n  font-weight: 600;\n  width: fit-content;\n  text-decoration: none;\n  padding: 20px;\n  text-align: center;\n  border-radius: 60px;\n    border: 1px solid #0D83F0;\n}\n\n.hide {\n  display: none;\n}\n\n.page__title {\n  font-size: 64px;\n  font-weight: 800;\n  margin-bottom: 40px;\n  text-transform: uppercase;\n}\n\n.page__content {\n  padding: 40px 0 100px;\n}\n\n.page__inner {\n  padding-top: 40px;\n  width: 100%;\n  margin: 0 auto;\n  display: flex;\n    flex-direction: column;\n    row-gap: 18px;\n    p {\n      padding-bottom: 10px;\n    }\n    strong {\n      padding: 8px 0 10px;\n      display: block;\n      font-weight: 600;\n    }\n    ul {\n      padding-left: 20px;\n      list-style-type: disc;\n    }\n}\n\n.page__text {\n  line-height: 1.2;\n  font-size: 15px;\n  font-weight: 400;\n  p {\n    padding-top: 18px;\n  }\n}\n\n\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n",".header {\n  width: 100%;\n  padding: 20px 0;\n  border-bottom: 2px solid #000;\n  @include media(\"<=810px\") {\n\n  }\n  @include media(\"<=430px\") {\n  \n  }\n}\n\n.header__inner {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 20;\n  position: relative;\n  gap: 20px;\n  @include media(\"<=810px\") {\n    flex-wrap: wrap;\n    gap: 20px;\n    \n  }\n    \n}\n\n.header__nav {\n  gap: 15px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  @include media(\"<=810px\") {\n    \n  }\n    @include media(\"<=450px\") {\n      \n    }\n}\n\n.header__link {\n  position: relative;\n  font-size: 14px;\n  font-weight: 500;\n  padding: 2px 4px;\n  border: 1px #000 solid;\n  background-color: rgb(255, 252, 248);\n  text-transform: uppercase;\n  text-decoration: none;\n  color: #000;\n  border-radius: 10px;\n  transition: all 0.3s linear;\n  @include media(\"<=550px\") {\n    order: 2;\n  }\n  &:hover {\n    \n\n  }\n}\n\n.header__link::after {\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  height: 0.08em;\n  background: #fdfdfd;\n  bottom: -6px;\n  left: 0;\n  border-radius: 3px;\n  transform: scale(0, 1);\n  transition: transform 0.3s ease;\n  display: none;\n}\n\n.header__link:hover::after {\n  transform: scale(1, 1);\n}\n\n",".hero {\n  position: relative;\n  padding: 40px 0 100px;\n\n  @include media(\"<=1080px\") {\n\n  }\n\n  @include media(\"<=810px\") {\n    padding-top: 40px;\n  }\n\n  @include media(\"<=430px\") {\n    \n    \n  }\n}\n\n.hero__inner {\n\n  width: 100%;\n  display: flex;\n  align-items: center;\n  position: relative;\n  justify-content: center;\n  gap: 30px;\n  flex-wrap: wrap;\n  @include media(\"<=1280px\") {\n\n    margin: 0 auto;\n  }\n\n  @include media(\"<=1080px\") {}\n\n  @include media(\"<=810px\") {\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n   row-gap: 30px;\n  }\n\n  @include media(\"<=430px\") {}\n}\n\n\n\n.cat {\n  padding: 20px 6px;\n  border: 1px #000 solid;\n  border-radius: 20px;\n}\n\n.cat__list {\n  padding-top: 30px;\n  list-style: decimal;\n  font-weight: 500;\n  padding-left: 20px;\n}\n\n.item {\n  padding-top: 10px;\n  margin-bottom: 10px;\n  border-top: 1px #000 solid;\n}\n\n",".footer {\n  padding: 38px 0;\n  position: relative;\n  @include media(\"<=810px\") {\n    \n  }\n  @include media(\"<=430px\") {\n    \n  }\n  \n}\n\n.footer__inner {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-bottom: 22px;\n  @include media(\"<=650px\") {\n    flex-wrap: wrap;\n    gap: 30px;\n  }\n}\n\n.totop {\n  background-color: #fff;\n  padding: 4px 8px;\n  border: 1px #000 solid;\n  color: #0048ff;\n  font-size: 24px;\n  font-weight: 700;\n  border-radius: 20px;\n  text-decoration: none;\n  position: fixed;\n  bottom: 10px;\n  right: 15px;\n}"]}